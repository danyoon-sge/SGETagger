#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'sge_tagger'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Methadone::SH
  include SGETagger

  main do |file_dir|
    tagger = Tagger.new(options)

    Tagger.taggable_files(file_dir).each do |rfile|
      tagger.tag_file(rfile)
    end

    output_file(tagger)
    output_summary(tagger)
  end

  # supplemental methods
  def self.output_summary(tagger)
    info "#{tagger.new_count} newly tagged files"
    info "#{tagger.prev_count} previously tagged files"
    info "#{tagger.ignored_count} 3rd party files ignored"
  end

  def self.output_file(tagger)
    if output_file = options[:'output-file']
      check_filename(output_file)

      # change to correct dir
      Dir.chdir '..' do
        if File.exists?(output_file) && !options[:force]
          msg = "Warning: No output file created since '#{output_file}' would\n"
          msg << "have been overwritten. Use the --force option to overwrite\n"
          msg << "existing output files."
          info msg
        else
          File.open(output_file, 'w') do |file|
            file << tagger.report
          end

          output_force_message(output_file)
        end
      end
    end
  end

  def self.output_force_message(output_file)
    if options[:force]
      msg = "Warning: Previous output file '#{output_file}' was overwritten\n"
      msg << "because of the --force option."
      info msg
    end
  end

  def self.check_filename(output_file)
    if !Tagger.valid_filename?(output_file)
      msg = "Error: Aborting since '#{output_file}' is a bad file name\n"
      msg << "Output file names must not start with - or --"
      exit_now!(msg)
    end
  end

  # Declare command-line interface here

  description "Tag SGE owned files with legal info"

  # Accept flags
  on("-c", "--chatty", "Log messages to standard output")
  on("-n", "--dry-run", "Do a dry run without executing actions")
  on("-o FILE", "--output-file", "Log messages to specified file")
  on("--force", "Clobber any existing output files")

  # Require an argument
  arg :file_dir, "Directory containing files to tag with legal info"

  # # Make an argument optional
  # arg :optional_arg, :optional

  version SGETagger::VERSION

  use_log_level_option

  go!
end
